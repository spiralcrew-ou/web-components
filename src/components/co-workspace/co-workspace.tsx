import { Component, State, Prop } from '@stencil/core';
import {
  uprtclMultiplatform,
  c1ServiceProvider as serviceProvider
} from '../../services';
import { Store } from '@stencil/redux';
import { configureStore } from '../../store.js';
import { UprtclData } from '../../services/uprtcl-data';

@Component({
  tag: 'co-workspace',
  styleUrl: 'co-workspace.scss',
  shadow: true
})
export class COWorkspace {
  @State() rootPerspectiveId: string;
  @State() documentPerspectiveId: string;
  //@State() defaultService = serviceProvider;
  @Prop() defaultService: string;
  @Prop({ context: 'store' }) store: Store;

  // Multiplatform service is already instantiated, get a reference to it
  uprtcl = uprtclMultiplatform;
  uprtclData = new UprtclData();

  constructor(_defaultServiceId: string) {
    this.defaultService = _defaultServiceId;
  }

  async componentWillLoad() {
    this.store.setStore(configureStore());
    const rootContextId = await this.uprtcl.getRootContextId(
      this.defaultService
    );
    const rootPerspectives = await this.uprtcl.getContextPerspectives(
      rootContextId
    );

    if (rootPerspectives.length == 0) {
      this.rootPerspectiveId = await this.uprtclData.initContext(
        this.defaultService,
        'root context autogenerated perspective'
      );
    } else {
      this.rootPerspectiveId = rootPerspectives[0].id;
    }

    let fullPerspective = await this.uprtclData.getPerspectiveFull(
      this.rootPerspectiveId,
      1
    );

    // Asume that is first load
    if (!fullPerspective.head && !fullPerspective.draft) {
      this.documentPerspectiveId = await this.uprtclData.initContextUnder(
        serviceProvider,
        this.rootPerspectiveId,
        -1,
        'Untitled Document'
      );
      await this.uprtclData.initContextUnder(
        serviceProvider,
        this.documentPerspectiveId,
        -1,
        ''
      );
    } else {
      this.documentPerspectiveId = fullPerspective.draft.links[0].link.id;
    }

    console.log(
      await this.uprtclData.getPerspectiveFull(this.documentPerspectiveId, -1)
    );
  }

  render() {
    return (
      <div>
        <co-workpad document-id={this.documentPerspectiveId} />
      </div>
    );
  }
}
