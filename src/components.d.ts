/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import '@stencil/redux';
import {
  Perspective,
} from './types';


export namespace Components {

  interface CoEditor {}
  interface CoEditorAttributes extends StencilHTMLAttributes {}

  interface CoInputChangePerspective {}
  interface CoInputChangePerspectiveAttributes extends StencilHTMLAttributes {
    'onShowInputChangePerspective'?: (event: CustomEvent) => void;
  }

  interface CoInputCommit {}
  interface CoInputCommitAttributes extends StencilHTMLAttributes {
    'onShowInputCommit'?: (event: CustomEvent) => void;
  }

  interface CoInputMerge {}
  interface CoInputMergeAttributes extends StencilHTMLAttributes {
    'onShowInputMerge'?: (event: CustomEvent) => void;
  }

  interface CoInputNewPerspective {}
  interface CoInputNewPerspectiveAttributes extends StencilHTMLAttributes {
    'onShowInputNewPerspective'?: (event: CustomEvent) => void;
  }

  interface CoLoading {}
  interface CoLoadingAttributes extends StencilHTMLAttributes {}

  interface CoLogin {}
  interface CoLoginAttributes extends StencilHTMLAttributes {}

  interface CoMenu {
    'reference': string;
  }
  interface CoMenuAttributes extends StencilHTMLAttributes {
    'onShowInputCommit'?: (event: CustomEvent) => void;
    'reference'?: string;
  }

  interface CoNode {
    'indexInParent': number;
    'nodeId': string;
    'parentId': string;
  }
  interface CoNodeAttributes extends StencilHTMLAttributes {
    'indexInParent'?: number;
    'nodeId'?: string;
    'onIsRunning'?: (event: CustomEvent) => void;
    'parentId'?: string;
  }

  interface CoWaitingApp {}
  interface CoWaitingAppAttributes extends StencilHTMLAttributes {}

  interface CoWorkpad {
    'documentId': string;
  }
  interface CoWorkpadAttributes extends StencilHTMLAttributes {
    'documentId'?: string;
    'onIsStarting'?: (event: CustomEvent) => void;
    'onShowInputChangePerspective'?: (event: CustomEvent) => void;
    'onShowInputCommit'?: (event: CustomEvent) => void;
    'onShowInputMerge'?: (event: CustomEvent) => void;
    'onShowInputNewPerspective'?: (event: CustomEvent) => void;
  }

  interface CoWorkspaceSelector {
    'providerSelected': (e: any) => void;
    'selectWorkspaceType': (type: string) => void;
  }
  interface CoWorkspaceSelectorAttributes extends StencilHTMLAttributes {}

  interface CoWorkspace {
    'defaultService': string;
  }
  interface CoWorkspaceAttributes extends StencilHTMLAttributes {
    'defaultService'?: string;
  }

  interface TextBlock {
    'id': string;
    'text': string;
  }
  interface TextBlockAttributes extends StencilHTMLAttributes {
    'id'?: string;
    'onContent-changed'?: (event: CustomEvent) => void;
    'text'?: string;
  }

  interface TextNode {
    'createCommit': () => Promise<any[]>;
    'createPerspective': (serviceProvider: string, name: string) => Promise<void>;
    'defaultService': string;
    'isRootNode': boolean;
    'perspectiveId': string;
  }
  interface TextNodeAttributes extends StencilHTMLAttributes {
    'defaultService'?: string;
    'isRootNode'?: boolean;
    'onCreateSibling'?: (event: CustomEvent) => void;
    'perspectiveId'?: string;
  }

  interface UprtclToolbar {
    'defaultService': string;
    'perspective': Perspective;
  }
  interface UprtclToolbarAttributes extends StencilHTMLAttributes {
    'defaultService'?: string;
    'onCreateCommit'?: (event: CustomEvent<void>) => void;
    'onCreatePerspective'?: (event: CustomEvent<{
      name: string;
      serviceProvider: string;
    }>) => void;
    'onSelectPerspective'?: (event: CustomEvent<string>) => void;
    'perspective'?: Perspective;
  }
}

declare global {
  interface StencilElementInterfaces {
    'CoEditor': Components.CoEditor;
    'CoInputChangePerspective': Components.CoInputChangePerspective;
    'CoInputCommit': Components.CoInputCommit;
    'CoInputMerge': Components.CoInputMerge;
    'CoInputNewPerspective': Components.CoInputNewPerspective;
    'CoLoading': Components.CoLoading;
    'CoLogin': Components.CoLogin;
    'CoMenu': Components.CoMenu;
    'CoNode': Components.CoNode;
    'CoWaitingApp': Components.CoWaitingApp;
    'CoWorkpad': Components.CoWorkpad;
    'CoWorkspaceSelector': Components.CoWorkspaceSelector;
    'CoWorkspace': Components.CoWorkspace;
    'TextBlock': Components.TextBlock;
    'TextNode': Components.TextNode;
    'UprtclToolbar': Components.UprtclToolbar;
  }

  interface StencilIntrinsicElements {
    'co-editor': Components.CoEditorAttributes;
    'co-input-change-perspective': Components.CoInputChangePerspectiveAttributes;
    'co-input-commit': Components.CoInputCommitAttributes;
    'co-input-merge': Components.CoInputMergeAttributes;
    'co-input-new-perspective': Components.CoInputNewPerspectiveAttributes;
    'co-loading': Components.CoLoadingAttributes;
    'co-login': Components.CoLoginAttributes;
    'co-menu': Components.CoMenuAttributes;
    'co-node': Components.CoNodeAttributes;
    'co-waiting-app': Components.CoWaitingAppAttributes;
    'co-workpad': Components.CoWorkpadAttributes;
    'co-workspace-selector': Components.CoWorkspaceSelectorAttributes;
    'co-workspace': Components.CoWorkspaceAttributes;
    'text-block': Components.TextBlockAttributes;
    'text-node': Components.TextNodeAttributes;
    'uprtcl-toolbar': Components.UprtclToolbarAttributes;
  }


  interface HTMLCoEditorElement extends Components.CoEditor, HTMLStencilElement {}
  var HTMLCoEditorElement: {
    prototype: HTMLCoEditorElement;
    new (): HTMLCoEditorElement;
  };

  interface HTMLCoInputChangePerspectiveElement extends Components.CoInputChangePerspective, HTMLStencilElement {}
  var HTMLCoInputChangePerspectiveElement: {
    prototype: HTMLCoInputChangePerspectiveElement;
    new (): HTMLCoInputChangePerspectiveElement;
  };

  interface HTMLCoInputCommitElement extends Components.CoInputCommit, HTMLStencilElement {}
  var HTMLCoInputCommitElement: {
    prototype: HTMLCoInputCommitElement;
    new (): HTMLCoInputCommitElement;
  };

  interface HTMLCoInputMergeElement extends Components.CoInputMerge, HTMLStencilElement {}
  var HTMLCoInputMergeElement: {
    prototype: HTMLCoInputMergeElement;
    new (): HTMLCoInputMergeElement;
  };

  interface HTMLCoInputNewPerspectiveElement extends Components.CoInputNewPerspective, HTMLStencilElement {}
  var HTMLCoInputNewPerspectiveElement: {
    prototype: HTMLCoInputNewPerspectiveElement;
    new (): HTMLCoInputNewPerspectiveElement;
  };

  interface HTMLCoLoadingElement extends Components.CoLoading, HTMLStencilElement {}
  var HTMLCoLoadingElement: {
    prototype: HTMLCoLoadingElement;
    new (): HTMLCoLoadingElement;
  };

  interface HTMLCoLoginElement extends Components.CoLogin, HTMLStencilElement {}
  var HTMLCoLoginElement: {
    prototype: HTMLCoLoginElement;
    new (): HTMLCoLoginElement;
  };

  interface HTMLCoMenuElement extends Components.CoMenu, HTMLStencilElement {}
  var HTMLCoMenuElement: {
    prototype: HTMLCoMenuElement;
    new (): HTMLCoMenuElement;
  };

  interface HTMLCoNodeElement extends Components.CoNode, HTMLStencilElement {}
  var HTMLCoNodeElement: {
    prototype: HTMLCoNodeElement;
    new (): HTMLCoNodeElement;
  };

  interface HTMLCoWaitingAppElement extends Components.CoWaitingApp, HTMLStencilElement {}
  var HTMLCoWaitingAppElement: {
    prototype: HTMLCoWaitingAppElement;
    new (): HTMLCoWaitingAppElement;
  };

  interface HTMLCoWorkpadElement extends Components.CoWorkpad, HTMLStencilElement {}
  var HTMLCoWorkpadElement: {
    prototype: HTMLCoWorkpadElement;
    new (): HTMLCoWorkpadElement;
  };

  interface HTMLCoWorkspaceSelectorElement extends Components.CoWorkspaceSelector, HTMLStencilElement {}
  var HTMLCoWorkspaceSelectorElement: {
    prototype: HTMLCoWorkspaceSelectorElement;
    new (): HTMLCoWorkspaceSelectorElement;
  };

  interface HTMLCoWorkspaceElement extends Components.CoWorkspace, HTMLStencilElement {}
  var HTMLCoWorkspaceElement: {
    prototype: HTMLCoWorkspaceElement;
    new (): HTMLCoWorkspaceElement;
  };

  interface HTMLTextBlockElement extends Components.TextBlock, HTMLStencilElement {}
  var HTMLTextBlockElement: {
    prototype: HTMLTextBlockElement;
    new (): HTMLTextBlockElement;
  };

  interface HTMLTextNodeElement extends Components.TextNode, HTMLStencilElement {}
  var HTMLTextNodeElement: {
    prototype: HTMLTextNodeElement;
    new (): HTMLTextNodeElement;
  };

  interface HTMLUprtclToolbarElement extends Components.UprtclToolbar, HTMLStencilElement {}
  var HTMLUprtclToolbarElement: {
    prototype: HTMLUprtclToolbarElement;
    new (): HTMLUprtclToolbarElement;
  };

  interface HTMLElementTagNameMap {
    'co-editor': HTMLCoEditorElement
    'co-input-change-perspective': HTMLCoInputChangePerspectiveElement
    'co-input-commit': HTMLCoInputCommitElement
    'co-input-merge': HTMLCoInputMergeElement
    'co-input-new-perspective': HTMLCoInputNewPerspectiveElement
    'co-loading': HTMLCoLoadingElement
    'co-login': HTMLCoLoginElement
    'co-menu': HTMLCoMenuElement
    'co-node': HTMLCoNodeElement
    'co-waiting-app': HTMLCoWaitingAppElement
    'co-workpad': HTMLCoWorkpadElement
    'co-workspace-selector': HTMLCoWorkspaceSelectorElement
    'co-workspace': HTMLCoWorkspaceElement
    'text-block': HTMLTextBlockElement
    'text-node': HTMLTextNodeElement
    'uprtcl-toolbar': HTMLUprtclToolbarElement
  }

  interface ElementTagNameMap {
    'co-editor': HTMLCoEditorElement;
    'co-input-change-perspective': HTMLCoInputChangePerspectiveElement;
    'co-input-commit': HTMLCoInputCommitElement;
    'co-input-merge': HTMLCoInputMergeElement;
    'co-input-new-perspective': HTMLCoInputNewPerspectiveElement;
    'co-loading': HTMLCoLoadingElement;
    'co-login': HTMLCoLoginElement;
    'co-menu': HTMLCoMenuElement;
    'co-node': HTMLCoNodeElement;
    'co-waiting-app': HTMLCoWaitingAppElement;
    'co-workpad': HTMLCoWorkpadElement;
    'co-workspace-selector': HTMLCoWorkspaceSelectorElement;
    'co-workspace': HTMLCoWorkspaceElement;
    'text-block': HTMLTextBlockElement;
    'text-node': HTMLTextNodeElement;
    'uprtcl-toolbar': HTMLUprtclToolbarElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
