/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import '@stencil/redux';
import {
  Perspective,
} from './types';


export namespace Components {

  interface CoEditor {}
  interface CoEditorAttributes extends StencilHTMLAttributes {}

  interface CoLogin {}
  interface CoLoginAttributes extends StencilHTMLAttributes {}

  interface CoWorkpad {}
  interface CoWorkpadAttributes extends StencilHTMLAttributes {}

  interface TextBlock {
    'id': string;
    'text': string;
  }
  interface TextBlockAttributes extends StencilHTMLAttributes {
    'id'?: string;
    'onContent-changed'?: (event: CustomEvent) => void;
    'text'?: string;
  }

  interface TextNode {
    'createCommit': () => Promise<any[]>;
    'createPerspective': (serviceProvider: string, name: string) => Promise<void>;
    'defaultService': string;
    'isRootNode': boolean;
    'perspectiveId': string;
  }
  interface TextNodeAttributes extends StencilHTMLAttributes {
    'defaultService'?: string;
    'isRootNode'?: boolean;
    'onCreateSibling'?: (event: CustomEvent) => void;
    'perspectiveId'?: string;
  }

  interface UprtclToolbar {
    'defaultService': string;
    'perspective': Perspective;
  }
  interface UprtclToolbarAttributes extends StencilHTMLAttributes {
    'defaultService'?: string;
    'onCreateCommit'?: (event: CustomEvent<void>) => void;
    'onCreatePerspective'?: (event: CustomEvent<{
      name: string;
      serviceProvider: string;
    }>) => void;
    'onSelectPerspective'?: (event: CustomEvent<string>) => void;
    'perspective'?: Perspective;
  }
}

declare global {
  interface StencilElementInterfaces {
    'CoEditor': Components.CoEditor;
    'CoLogin': Components.CoLogin;
    'CoWorkpad': Components.CoWorkpad;
    'TextBlock': Components.TextBlock;
    'TextNode': Components.TextNode;
    'UprtclToolbar': Components.UprtclToolbar;
  }

  interface StencilIntrinsicElements {
    'co-editor': Components.CoEditorAttributes;
    'co-login': Components.CoLoginAttributes;
    'co-workpad': Components.CoWorkpadAttributes;
    'text-block': Components.TextBlockAttributes;
    'text-node': Components.TextNodeAttributes;
    'uprtcl-toolbar': Components.UprtclToolbarAttributes;
  }


  interface HTMLCoEditorElement extends Components.CoEditor, HTMLStencilElement {}
  var HTMLCoEditorElement: {
    prototype: HTMLCoEditorElement;
    new (): HTMLCoEditorElement;
  };

  interface HTMLCoLoginElement extends Components.CoLogin, HTMLStencilElement {}
  var HTMLCoLoginElement: {
    prototype: HTMLCoLoginElement;
    new (): HTMLCoLoginElement;
  };

  interface HTMLCoWorkpadElement extends Components.CoWorkpad, HTMLStencilElement {}
  var HTMLCoWorkpadElement: {
    prototype: HTMLCoWorkpadElement;
    new (): HTMLCoWorkpadElement;
  };

  interface HTMLTextBlockElement extends Components.TextBlock, HTMLStencilElement {}
  var HTMLTextBlockElement: {
    prototype: HTMLTextBlockElement;
    new (): HTMLTextBlockElement;
  };

  interface HTMLTextNodeElement extends Components.TextNode, HTMLStencilElement {}
  var HTMLTextNodeElement: {
    prototype: HTMLTextNodeElement;
    new (): HTMLTextNodeElement;
  };

  interface HTMLUprtclToolbarElement extends Components.UprtclToolbar, HTMLStencilElement {}
  var HTMLUprtclToolbarElement: {
    prototype: HTMLUprtclToolbarElement;
    new (): HTMLUprtclToolbarElement;
  };

  interface HTMLElementTagNameMap {
    'co-editor': HTMLCoEditorElement
    'co-login': HTMLCoLoginElement
    'co-workpad': HTMLCoWorkpadElement
    'text-block': HTMLTextBlockElement
    'text-node': HTMLTextNodeElement
    'uprtcl-toolbar': HTMLUprtclToolbarElement
  }

  interface ElementTagNameMap {
    'co-editor': HTMLCoEditorElement;
    'co-login': HTMLCoLoginElement;
    'co-workpad': HTMLCoWorkpadElement;
    'text-block': HTMLTextBlockElement;
    'text-node': HTMLTextNodeElement;
    'uprtcl-toolbar': HTMLUprtclToolbarElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
