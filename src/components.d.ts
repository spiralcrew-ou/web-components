/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface CoEditor {
    'createRootElement': () => void;
  }
  interface CoEditorAttributes extends StencilHTMLAttributes {}

  interface DataResolver {
    'dataId': string;
    'draft': any;
    'perspectiveId': string;
  }
  interface DataResolverAttributes extends StencilHTMLAttributes {
    'dataId'?: string;
    'draft'?: any;
    'perspectiveId'?: string;
  }

  interface TextNode {
    'data': TextNode;
    'draft': TextNode;
  }
  interface TextNodeAttributes extends StencilHTMLAttributes {
    'data'?: TextNode;
    'draft'?: TextNode;
    'onCommit-content'?: (event: CustomEvent) => void;
  }

  interface UprtclCommit {
    'commitId': string;
    'perspectiveId': string;
  }
  interface UprtclCommitAttributes extends StencilHTMLAttributes {
    'commitId'?: string;
    'perspectiveId'?: string;
  }

  interface UprtclPerspective {
    'perspectiveId': string;
  }
  interface UprtclPerspectiveAttributes extends StencilHTMLAttributes {
    'onPerspectiveCreated'?: (event: CustomEvent) => void;
    'perspectiveId'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'CoEditor': Components.CoEditor;
    'DataResolver': Components.DataResolver;
    'TextNode': Components.TextNode;
    'UprtclCommit': Components.UprtclCommit;
    'UprtclPerspective': Components.UprtclPerspective;
  }

  interface StencilIntrinsicElements {
    'co-editor': Components.CoEditorAttributes;
    'data-resolver': Components.DataResolverAttributes;
    'text-node': Components.TextNodeAttributes;
    'uprtcl-commit': Components.UprtclCommitAttributes;
    'uprtcl-perspective': Components.UprtclPerspectiveAttributes;
  }


  interface HTMLCoEditorElement extends Components.CoEditor, HTMLStencilElement {}
  var HTMLCoEditorElement: {
    prototype: HTMLCoEditorElement;
    new (): HTMLCoEditorElement;
  };

  interface HTMLDataResolverElement extends Components.DataResolver, HTMLStencilElement {}
  var HTMLDataResolverElement: {
    prototype: HTMLDataResolverElement;
    new (): HTMLDataResolverElement;
  };

  interface HTMLTextNodeElement extends Components.TextNode, HTMLStencilElement {}
  var HTMLTextNodeElement: {
    prototype: HTMLTextNodeElement;
    new (): HTMLTextNodeElement;
  };

  interface HTMLUprtclCommitElement extends Components.UprtclCommit, HTMLStencilElement {}
  var HTMLUprtclCommitElement: {
    prototype: HTMLUprtclCommitElement;
    new (): HTMLUprtclCommitElement;
  };

  interface HTMLUprtclPerspectiveElement extends Components.UprtclPerspective, HTMLStencilElement {}
  var HTMLUprtclPerspectiveElement: {
    prototype: HTMLUprtclPerspectiveElement;
    new (): HTMLUprtclPerspectiveElement;
  };

  interface HTMLElementTagNameMap {
    'co-editor': HTMLCoEditorElement
    'data-resolver': HTMLDataResolverElement
    'text-node': HTMLTextNodeElement
    'uprtcl-commit': HTMLUprtclCommitElement
    'uprtcl-perspective': HTMLUprtclPerspectiveElement
  }

  interface ElementTagNameMap {
    'co-editor': HTMLCoEditorElement;
    'data-resolver': HTMLDataResolverElement;
    'text-node': HTMLTextNodeElement;
    'uprtcl-commit': HTMLUprtclCommitElement;
    'uprtcl-perspective': HTMLUprtclPerspectiveElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
